{"name":"Grep4j","tagline":"Java grep made easy","body":"###What is Grep4j?\r\n\r\nGrep4j is a simple API made to centralise and facilitate the search of expressions within remote or local files, in Unix environments. For Windows support click here\r\n\r\n###Maven\r\n\r\n    <dependency> <groupId>com.googlecode.grep4j</groupId> <artifactId>grep4j</artifactId> <version>1.8.7</version>   </dependency>\r\n\r\n###Usage\r\n\r\n####Profile\r\n\r\nIn grep4j a profile is the grep target context. The profile contains information such as the name of the file, the path of the file to grep and the host and the credentials to connect to either local or remote machine. ```\r\n\r\n    Profile remoteProfile = ProfileBuilder.newBuilder().name(\"Remote server log\").filePath(\"/opt/log/server.log\").onRemotehost(\"172.xx.xx.xx\").credentials(\"user\", \"password\").build();\r\n\r\n    Profile localProfile = ProfileBuilder.newBuilder().name(\"Local server log\").filePath(\"/opt/log/server.log\").onLocalhost().build();\r\n\r\n    Profile remoteProfileWithPublicKey = ProfileBuilder.newBuilder().name(\"Another remote server log\").filePath(\"/path/to/file/filename.txt\").onRemotehost(\"172.x.x.x\").userAuthPrivateKeyLocation(\"/home/user/.ssh/id_dsa\").withUser(\"user\").build();\r\n\r\n\r\n####Using Grep4j to grep local or remote files\r\n\r\nYou can use Grep4j to obtain grep information across multiple local/remote files in an easy and fluent way: \r\n    \r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    ...\r\n\r\n    //Obtaining the global result \r\n    GrepResults results = grep(constantExpression(\"Expression_to_grep\"), on(remoteProfile,localProfile));     \r\n    System.out.println(\"Grep results : \" + results); \r\n    System.out.println(\"Total lines found : \" + results.totalLines());      \r\n    System.out.println(\"Total Execution Time : \" + results.getExecutionTime());\r\n\r\n    //processing the single grep result for each profile for \r\n    (GrepResult singleResult : results) { \r\n        System.out.println(singleResult.getProfileName()); \r\n        System.out.println(singleResult.getFileName()); \r\n        System.out.println(singleResult.getExecutionTime()); System.out.println(singleResult); \r\n    }\r\n\r\n####Using Grep4j in your tests\r\n\r\nYou can use Grep4j to make your acceptance/integration tests more fluent and easy.\r\n\r\nLet's say you need to test that after starting your network of servers, no errors or exceptions will be found in the log:\r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    ...\r\n\r\n    assertThat(executing(grep(constantExpression(\"ERROR\"), on(profile1,profile2))).totalLines(), is(0));    \r\n    assertThat(executing(grep(constantExpression(\"Exception\"), on(profile1,profile2))).totalLines(), is(0));\r\n\r\n\r\nHere you want to check that a particular init method was triggered:\r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    ...\r\n\r\n    assertThat(executing(grep(constantExpression(\"Init resources ended succesfully\"), on(aProfile))).totalLines(), is(1)); \r\n\r\nOr you want to check that the flow of data is passing correctly through a group of specified servers:\r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression;  \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    ...\r\n\r\n    assertThat(executing(grep(constantExpression(\"Message 1234 received\"), on(profiles))).totalLines(), is(1)); \r\n\r\n####Testing distributed applications\r\n\r\nIt's often the case that an application is distributed across different remote machines. This to promote scalability, performance, etc. The problem with distributed technology is that it's hard to cover the application with end to end acceptance and integration tests. Example:\r\n\r\n#####Context\r\n\r\nThe GUI runs in the guiServer (172.1.1.1);\r\n\r\nThe distribution system runs on distributionServer (172.1.1.2);\r\n\r\nConsumer 1 runs on consumer1Server (172.1.1.3)\r\n\r\nConsumer 2 runs on consumer2Server (172.1.1.4)\r\n\r\nConsumer 3 runs on consumer3Server (172.1.1.5)\r\n\r\n#####Logs\r\n\r\nWhen a User is created in the GUI:\r\n\r\n    2012-05-30 08:48:49,885 INFO [org.app.Sender] (main) User Marco id:12345 sent to distribution server\r\n\r\nWhen the distributionServer receives the message:\r\n\r\n    2012-05-30 08:48:50 INFO [org.dist.AnMDB] (main) User Marco id:12345 received\r\n    2012-05-30 08:48:51 INFO [org.dist.Distributor] (main) User Marco id:12345 sent to Consumer one\r\n    2012-05-30 08:48:51 INFO [org.dist.Distributor] (main) User Marco id:12345 sent to Consumer two\r\n    2012-05-30 08:48:51 INFO [org.dist.Distributor] (main) User Marco id:12345 sent to Consumer three\r\n\r\nWhen each consumer receives the message:\r\n\r\n    2012-05-30 08:48:52 INFO [org.consumer.AnMDB] (main) User Marco id:12345 received\r\n    2012-05-30 08:48:53 INFO [org.consumer.UserDAO] (main) User Marco id:12345 stored successfully\r\n\r\nProblem\r\nYou want to test that the creation of the User with id 12345 goes correctly through all the steps in the system reaching all the consumers.\r\n\r\n#####Solution with Grep4j\r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    ...\r\n\r\n    Profile guiProfile = create the Profile for your guiServer \r\n    Profile distributionProfile = create the Profile for your distributionServer \r\n    List consumersProfiles = create the Profiles for your 3 consumers\r\n\r\n    //Assert that the GUI has sent the create message to the distribution server: \r\n    assertThat(executing(grep(constantExpression(\"12345 sent to distribution server\"), on(guiProfile))).totalLines(), is(1));\r\n\r\n    //Assert that the distribution application received the message: \r\n    assertThat(executing(grep(constantExpression(\"User Marco id:12345 received\"), on(distributionProfile))).totalLines(), is(1));\r\n\r\n    //Assert that the distribution application distributed the message to all the 3 consumers:   \r\n    assertThat(executing(grep(constantExpression(\"User Marco id:12345 sent to Consumer\"), on(distributionProfile))).totalLines(), is(3));\r\n\r\n    //Assert that all the 3 consumers received the message: \r\n    assertThat(executing(grep(constantExpression(\"User Marco id:12345 received\"), on(consumersProfiles))).totalLines(), is(3));\r\n\r\n    //Assert that all the 3 consumers save the user correctly: \r\n    assertThat(executing(grep(constantExpression(\"User Marco id:12345 stored sucessfully\"),  on(consumersProfiles))).totalLines(), is(3));\r\n\r\n\r\n####Regex support\r\n\r\nIn the case you need a more dynamic way to search in a file, Grep4j supports regex: \r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.regularExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    ...\r\n\r\n    assertThat(executing(grep(regularExpression(\"Marco(.*)stored\"), on(profile))).totalLines(), is(1)); ```\r\n\r\n####Grep with lines after, before or both\r\n\r\nIf you need to include more lines in your grep result:\r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.options.Option.extraLinesAfter; \r\n    import static org.grep4j.core.options.Option.extraLinesBefore; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.with; \r\n    import static org.grep4j.core.fluent.Dictionary.option; \r\n    import static org.grep4j.core.fluent.Dictionary.options; \r\n    ...\r\n\r\n    GrepResults results = grep(constantExpression(\"string-to-search\"), on(profile), with(option(extraLinesAfter(100)))); \r\n    System.out.println(\"Total lines found : \" + results.totalLines()); \r\n    System.out.println(\"Total lines found : \" +   results.filterBy(\"another expression within 100 lines after\").totalLines());\r\n\r\n    GrepResults results = grep(constantExpression(\"string-to-search\"), on(profile), with(option(extraLinesBefore(100))));\r\n    System.out.println(\"Total lines found : \" + results.totalLines()); \r\n    System.out.println(\"Total lines found : \" + results.filterBy(\"another expression within 100 lines before\").totalLines());\r\n\r\n    GrepResults results = grep(constantExpression(\"string-to-search\"), on(profile), with(options(extraLinesBefore(100), extraLinesAfter(100)))); \r\n    System.out.println(\"Total lines found : \" + results.totalLines()); \r\n    System.out.println(\"Total lines found : \" + results.filterBy(\"another expression within 100 lines before and 100 after\").totalLines()); ```\r\n\r\nSee all the Grep options available in the [Grep4j Options page](https://github.com/marcocast/grep4j/wiki/Grep-Options)\r\n\r\n####Fluent mirror methods\r\n\r\nIn Grep4j we are focused on the readability of the code. \r\nBecause of this we introduced a fluent Dictionary   class(org.grep4j.core.fluent.Dictionary) which contains only fluent mirror methods to be used in order to improve the readability of your code. \r\nA fluent mirror method is a simple static method returning the same object passed. \r\nFor example: public static <T> T executing(T type) { return type; } and you can use this method as follows: \r\n\r\n    import static org.grep4j.core.Grep4j.grep; \r\n    import static org.grep4j.core.Grep4j.constantExpression; \r\n    import static org.grep4j.core.fluent.Dictionary.on; \r\n    import static org.grep4j.core.fluent.Dictionary.executing; \r\n    import static org.grep4j.core.fluent.Dictionary.with; \r\n    ...\r\n\r\n    assertThat(executing(grep(with(constantExpression(\"Marco\")), on(profile))).totalLines(), is(1));","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}